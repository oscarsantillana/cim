# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Initialize site
        run: make init
      - name: Build with Jekyll
        run: make html
        env:
          JEKYLL_ENV: production
      # Debug step to check the output directory
      - name: List output files
        run: ls -la
      # This step checks if ./_site exists, if not, it tries a common alternative
      - name: Check for output directory
        run: |
          if [ -d "_site" ]; then
            echo "Found _site directory"
          elif [ -d "site" ]; then
            echo "Found site directory, copying to _site"
            mkdir -p _site
            cp -r site/* _site/
          elif [ -d "build" ]; then
            echo "Found build directory, copying to _site"
            mkdir -p _site
            cp -r build/* _site/
          elif [ -d "output" ]; then
            echo "Found output directory, copying to _site"
            mkdir -p _site
            cp -r output/* _site/
          else
            echo "No known output directory found. Please check your make html command."
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
