# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: Display Ruby and Bundler versions
        run: |
          ruby -v
          bundler -v
      
      - name: Install dependencies
        run: |
          bundle install
          bundle list
      
      # Assuming 'make init' involves gem installations, let's run it after bundle install
      - name: Initialize site
        run: make init
        
      # Check what the Makefile's 'html' command does
      - name: Check Makefile
        run: cat Makefile
      
      - name: Build with Jekyll
        run: |
          # Use the direct Jekyll command to ensure it works
          bundle exec jekyll build
        env:
          JEKYLL_ENV: production
      
      - name: Check for build errors
        run: |
          if [ -d "_site" ]; then
            echo "Build successful - _site directory found"
            echo "Contents of _site:"
            ls -la _site
          else
            echo "Build failed - _site directory not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: _site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
